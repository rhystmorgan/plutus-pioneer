Native Tokens

{- 
Values

Native Tokens are identified by 2 bits of data
CurrencySymbol and TokenName

The combination of these 2 are known as an AssetClass

Values are a Map of Asset Classes t Integers

-} 

getValue :: Map CurrencySymbol (Map TokenName Integer)


In the Repl

Prelude Week05.Free> import Plutus.V1.Ledger.Ada
Prelude Plutus.V1.Ledger.Ada Week05.Free> :set -XOverloadedStrings
Prelude Plutus.V1.Ledger.Ada Week05.Free> :t adaSymbol
adaSymbol :: Plutus.V1.Ledger.Value.CurrencySymbol
Prelude Plutus.V1.Ledger.Ada Week05.Free> import Plutus.V1.Ledger.Value
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t adaSymbol
adaSymbol :: CurrencySymbol
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t adaToken
adaToken :: TokenName
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> adaToken
""
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t lovelaceValueOf
lovelaceValueOf :: Integer -> Value
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> lovelaceValueOf 123
Value (Map [(,Map [("",123)])])
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> lovelaceValueOf 123 <> lovelaceValueOf 10
Value (Map [(,Map [("",133)])])
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t singleton
singleton :: CurrencySymbol -> TokenName -> Integer -> Value
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> singleton "a8ff" "ABC" 7
Value (Map [(a8ff,Map [("ABC",7)])])
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> singleton "a8ff" "ABC" 7 <> lovelaceValueOf 42 <> singleton "a8ff" "XYZ" 100
Value (Map [(,Map [("",42)]),(a8ff,Map [("ABC",7),("XYZ",100)])])
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> let v = singleton "a8ff" "ABC" 7 <> lovelaceValueOf 42 <> singleton "a8ff" "XYZ" 100
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> v
Value (Map [(,Map [("",42)]),(a8ff,Map [("ABC",7),("XYZ",100)])])
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t valueOf
valueOf :: Value -> CurrencySymbol -> TokenName -> Integer
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> valueOf v "a8ff" "XYZ"
100
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> valueOf v "a8ff" "ABC"
7
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> valueOf v "a8ff" "abc"
0
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> :t flattenValue
flattenValue :: Value -> [(CurrencySymbol, TokenName, Integer)]
Prelude Plutus.V1.Ledger.Ada Plutus.V1.Ledger.Value Week05.Free> flattenValue v
[(,"",42),(a8ff,"XYZ",100),(a8ff,"ABC",7)]


MINTING POLICY

-- A transaction CAN'T Create or Delete Tokens, what goes in, comes out, with the exception of Fees
-- This is where Minting Policies come in

-- The reason the Currency Symbol comprising of a Bytestring is what maks up the Symbol is because it is the hash of a script

-- This script is called the minting policy, and if we have a transaction where we wnat to mint of burn a new tokn, the script is looked up, it must be contained in the TX
-- and that script is executed

-- the purpose of these scripts is to decide whether a tx has the right to mint or burn the tokens
-- this applies to ADA too, because there is no string, there is no sript, meaning it is impossible to mint or burn ADA

-- only custom Native Tokens can have minting policies and can be minted or burned

A Simple Minting Policy

Recall the ScriptPurpose from a previous lecture (2?)

We previously used the Spend and and TxInfo - txInfoValidRanfe (POSIXTime)
Now we will be using the Minting :: CurrenySymbol ScriptPurpose

we will use TxInfo txInfoMint :: Value

-- minting will not use a Datum, it will just provide a redeemer

-- for each currency symbol in this value with a non-zero amount, the corresponding minting policy willl be run with the redeemer and script contxt

{-# INLINABLE mkPolicy #-} 
mkPolicy :: () -> ScriptContext -> Bool
mkPolicy () _ = True                    -- this is the simplest minting policy, where it always returns True

policy :: Scripts.MintingPolicy
policy = mkMinitngPolicyScript $$(PlutusTx.complie [|| Script.wrapMintingPolicy mkPolicy ||])

curSymbol :: CurrencySymbol
curSymbol = scriptCurrencySymbol policy

-- If you run this innn the REPL, you will return a hash for the currency symbol

A MORE REALISTIC MINTING POLICY

-- Now let's have a look at something a more realistic policy

-- Instead of having an unparameterised policy, we will have a parameterised one
-- the param is the publickeyhash of a user wallet so only THEY can mint or burn

{-# INLINABLE mkPolicy #-} 
mkPolicy :: PaymentPubKeyHash -> () -> ScriptContext -> Bool
mkPolicy pkh () ctx = txSignedBy (scriptContextTxInfo ctx) $ unPaymentPubKeyHash pkh

-- now we will require a signature from the wallet to enable minting

NFTs

-- now we will look at minting NFTs
-- previously in the Mary Era, we would set deadlines to limit the amount of a tokens to be minted only before a certain time
-- this would mean after the deadline, no more tokens can be minted
-- but in order to check that only one was inted, you would need to check a blockchain explorer
-- so the Mary Era NFTs aren't "real" NFTs

-- Now with Plutus,, it is possible to mint TRUE NFTs
-- To do this we need to make it that only 1 Transaction can ever be made so only a single token can be minted
-- We need something that we can use which is unique, so that we can do this. The way we do so is to use a UTXO

-- For this we use UTXO IDs

-- as all Transactions are unique, all UTXOs are unique. This is only possible because of fees, otherwise you could have an empty tx and do it multiple times
-- because of fees you cannot do this, because you must have an input to pay the fees, which must come from a previous UTXO, so they must be different

-- Every Tx on the blockchain is unique because it has a unique ID which references previous Txs
-- Txs dont reference addresses, but the Txs it came from (as an output)

HOMEWORK

-- First implement a MaryEra minting Policy specify 
-- Then Implement an NFT minting script with no Token Name (an empty ByteString)
