module Week04.Writer where

import Control.Monad
import Week04.Monad

data Writer a = Writer a [String]               -- Writer takes two arguments, an 'a' and a list of log messages
    deriving Show                                              

number :: Int -> Writer Int
number n = Writer n $ ["number: " ++ show n]    -- Writer shows the n Integer and the log message tells you what it is

tell :: [String] -> Writer ()                   -- Tell takes the String, but we ONLY care about the log, hence Unit
tell = Writer ()

foo :: Writer Int -> Writer Int -> Writer Int -> Writer Int     -- foo does writer on 3 integers
foo (Writer k xs) (Writer l ys) (Writer m zs) =                 -- we get the Sum as a result and the writer log for each input
  let
    s = k + l + m
    Writer _ us = tell ["sum: " ++ show s]                      -- here we are now combining an extra output to shwothe SUM: in log
  in
    Writer s $ xs ++ ys ++ zs ++ us                             -- the output will be 'sum' plus the log of all inputs plus sum as a string

bindWriter :: Writer a -> (a -> Writer b) -> Writer b           
bindWriter (Writer a xs) f =
  let
    Writer b ys = f a
  in
    Writer b $ xs ++ ys

foo' :: Writer Int -> Writer Int -> Writer Int -> Writer Int    -- foo' isnt really any shorter than foo, because of bindwriter
foo' x y z = x `bindWriter` \k ->                               -- but it is structured better and saves on potential errors
             y `bindWriter` \l ->
             z `bindWriter` \m ->
             let s = k + l + m
             in tell ["sum: " ++ show s] `bindWriter` \_ ->     
                Writer s []

foo'' :: Writer Int -> Writer Int -> Writer Int -> Writer Int
foo'' x y z = do
    s <- threeInts x y z
    tell ["sum: " ++ show s]
    return s

instance Functor Writer where
    fmap = liftM

instance Applicative Writer where
    pure = return
    (<*>) = ap

instance Monad Writer where
    return a = Writer a []
    (>>=) = bindWriter
